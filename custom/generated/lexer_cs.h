#if !defined(FCODER_LEX_GEN_HAND_WRITTEN_TYPES)
#define FCODER_LEX_GEN_HAND_WRITTEN_TYPES

struct Lexeme_Table_Value{
    Token_Base_Kind base_kind;
    u16 sub_kind;
};

struct Lexeme_Table_Lookup{
    b32 found_match;
    Token_Base_Kind base_kind;
    u16 sub_kind;
};

#endif
typedef u16 Token_Cs_Kind;
enum{
TokenCsKind_EOF = 0,
TokenCsKind_Whitespace = 1,
TokenCsKind_LexError = 2,
TokenCsKind_BlockComment = 3,
TokenCsKind_LineComment = 4,
TokenCsKind_Backslash = 5,
TokenCsKind_LiteralInteger = 6,
TokenCsKind_LiteralIntegerU = 7,
TokenCsKind_LiteralIntegerL = 8,
TokenCsKind_LiteralIntegerUL = 9,
TokenCsKind_LiteralIntegerLL = 10,
TokenCsKind_LiteralIntegerULL = 11,
TokenCsKind_LiteralIntegerHex = 12,
TokenCsKind_LiteralIntegerHexU = 13,
TokenCsKind_LiteralIntegerHexL = 14,
TokenCsKind_LiteralIntegerHexUL = 15,
TokenCsKind_LiteralIntegerHexLL = 16,
TokenCsKind_LiteralIntegerHexULL = 17,
TokenCsKind_LiteralIntegerOct = 18,
TokenCsKind_LiteralIntegerOctU = 19,
TokenCsKind_LiteralIntegerOctL = 20,
TokenCsKind_LiteralIntegerOctUL = 21,
TokenCsKind_LiteralIntegerOctLL = 22,
TokenCsKind_LiteralIntegerOctULL = 23,
TokenCsKind_LiteralFloat32 = 24,
TokenCsKind_LiteralFloat64 = 25,
TokenCsKind_LiteralString = 26,
TokenCsKind_LiteralStringWide = 27,
TokenCsKind_LiteralStringUTF8 = 28,
TokenCsKind_LiteralStringUTF16 = 29,
TokenCsKind_LiteralStringUTF32 = 30,
TokenCsKind_LiteralStringRaw = 31,
TokenCsKind_LiteralStringWideRaw = 32,
TokenCsKind_LiteralStringUTF8Raw = 33,
TokenCsKind_LiteralStringUTF16Raw = 34,
TokenCsKind_LiteralStringUTF32Raw = 35,
TokenCsKind_LiteralCharacter = 36,
TokenCsKind_LiteralCharacterWide = 37,
TokenCsKind_LiteralCharacterUTF8 = 38,
TokenCsKind_LiteralCharacterUTF16 = 39,
TokenCsKind_LiteralCharacterUTF32 = 40,
TokenCsKind_PPErrorMessage = 41,
TokenCsKind_PPWarningMessage = 42,
TokenCsKind_PPRegionName = 43,
TokenCsKind_KeywordGeneric = 44,
TokenCsKind_BraceOp = 45,
TokenCsKind_BraceCl = 46,
TokenCsKind_ParenOp = 47,
TokenCsKind_BrackOp = 48,
TokenCsKind_ParenCl = 49,
TokenCsKind_BrackCl = 50,
TokenCsKind_Semicolon = 51,
TokenCsKind_Colon = 52,
TokenCsKind_DotDotDot = 53,
TokenCsKind_PlusPlus = 54,
TokenCsKind_MinusMinus = 55,
TokenCsKind_Dot = 56,
TokenCsKind_Arrow = 57,
TokenCsKind_Plus = 58,
TokenCsKind_Minus = 59,
TokenCsKind_Not = 60,
TokenCsKind_Tilde = 61,
TokenCsKind_Star = 62,
TokenCsKind_And = 63,
TokenCsKind_DotStar = 64,
TokenCsKind_ArrowStar = 65,
TokenCsKind_Div = 66,
TokenCsKind_Mod = 67,
TokenCsKind_TernaryDot = 68,
TokenCsKind_TernaryTernary = 69,
TokenCsKind_TernaryDotStar = 70,
TokenCsKind_LeftLeft = 71,
TokenCsKind_RightRight = 72,
TokenCsKind_Compare = 73,
TokenCsKind_Less = 74,
TokenCsKind_LessEq = 75,
TokenCsKind_Grtr = 76,
TokenCsKind_GrtrEq = 77,
TokenCsKind_EqEq = 78,
TokenCsKind_NotEq = 79,
TokenCsKind_Xor = 80,
TokenCsKind_Or = 81,
TokenCsKind_AndAnd = 82,
TokenCsKind_OrOr = 83,
TokenCsKind_Ternary = 84,
TokenCsKind_Eq = 85,
TokenCsKind_PlusEq = 86,
TokenCsKind_MinusEq = 87,
TokenCsKind_StarEq = 88,
TokenCsKind_DivEq = 89,
TokenCsKind_ModEq = 90,
TokenCsKind_TernaryEq = 91,
TokenCsKind_EqGrtr = 92,
TokenCsKind_LeftLeftEq = 93,
TokenCsKind_RightRightEq = 94,
TokenCsKind_Comma = 95,
TokenCsKind_Abstract = 96,
TokenCsKind_As = 97,
TokenCsKind_Base = 98,
TokenCsKind_Bool = 99,
TokenCsKind_Break = 100,
TokenCsKind_Byte = 101,
TokenCsKind_Case = 102,
TokenCsKind_Catch = 103,
TokenCsKind_Char = 104,
TokenCsKind_Checked = 105,
TokenCsKind_Class = 106,
TokenCsKind_Const = 107,
TokenCsKind_Continue = 108,
TokenCsKind_Decimal = 109,
TokenCsKind_Default = 110,
TokenCsKind_Delegate = 111,
TokenCsKind_Do = 112,
TokenCsKind_Double = 113,
TokenCsKind_Else = 114,
TokenCsKind_Enum = 115,
TokenCsKind_Event = 116,
TokenCsKind_Explicit = 117,
TokenCsKind_Extern = 118,
TokenCsKind_False = 119,
TokenCsKind_Finally = 120,
TokenCsKind_Fixed = 121,
TokenCsKind_Float = 122,
TokenCsKind_For = 123,
TokenCsKind_Foreach = 124,
TokenCsKind_Goto = 125,
TokenCsKind_If = 126,
TokenCsKind_Implicit = 127,
TokenCsKind_In = 128,
TokenCsKind_Int = 129,
TokenCsKind_Interface = 130,
TokenCsKind_Internal = 131,
TokenCsKind_Is = 132,
TokenCsKind_Lock = 133,
TokenCsKind_Long = 134,
TokenCsKind_Namespace = 135,
TokenCsKind_New = 136,
TokenCsKind_Null = 137,
TokenCsKind_Object = 138,
TokenCsKind_Operator = 139,
TokenCsKind_Out = 140,
TokenCsKind_Override = 141,
TokenCsKind_Params = 142,
TokenCsKind_Private = 143,
TokenCsKind_Protected = 144,
TokenCsKind_Public = 145,
TokenCsKind_Readonly = 146,
TokenCsKind_Ref = 147,
TokenCsKind_Return = 148,
TokenCsKind_Sbyte = 149,
TokenCsKind_Sealed = 150,
TokenCsKind_Short = 151,
TokenCsKind_Sizeof = 152,
TokenCsKind_Stackalloc = 153,
TokenCsKind_Static = 154,
TokenCsKind_String = 155,
TokenCsKind_Struct = 156,
TokenCsKind_Switch = 157,
TokenCsKind_This = 158,
TokenCsKind_Throw = 159,
TokenCsKind_True = 160,
TokenCsKind_Try = 161,
TokenCsKind_Typeof = 162,
TokenCsKind_Uint = 163,
TokenCsKind_Ulong = 164,
TokenCsKind_Unchecked = 165,
TokenCsKind_Unsafe = 166,
TokenCsKind_Ushort = 167,
TokenCsKind_Using = 168,
TokenCsKind_Virtual = 169,
TokenCsKind_Void = 170,
TokenCsKind_Volatile = 171,
TokenCsKind_While = 172,
TokenCsKind_Var = 173,
TokenCsKind_Yield = 174,
TokenCsKind_Where = 175,
TokenCsKind_Identifier = 176,
TokenCsKind_PPDefine = 177,
TokenCsKind_PPUndef = 178,
TokenCsKind_PPRegion = 179,
TokenCsKind_PPEndRegion = 180,
TokenCsKind_PPIf = 181,
TokenCsKind_PPElse = 182,
TokenCsKind_PPElIf = 183,
TokenCsKind_PPEndIf = 184,
TokenCsKind_PPError = 185,
TokenCsKind_PPWarning = 186,
TokenCsKind_PPLine = 187,
TokenCsKind_PPPragma = 188,
TokenCsKind_PPUnknown = 189,
TokenCsKind_COUNT = 190,
};
char *token_cs_kind_names[] = {
"EOF",
"Whitespace",
"LexError",
"BlockComment",
"LineComment",
"Backslash",
"LiteralInteger",
"LiteralIntegerU",
"LiteralIntegerL",
"LiteralIntegerUL",
"LiteralIntegerLL",
"LiteralIntegerULL",
"LiteralIntegerHex",
"LiteralIntegerHexU",
"LiteralIntegerHexL",
"LiteralIntegerHexUL",
"LiteralIntegerHexLL",
"LiteralIntegerHexULL",
"LiteralIntegerOct",
"LiteralIntegerOctU",
"LiteralIntegerOctL",
"LiteralIntegerOctUL",
"LiteralIntegerOctLL",
"LiteralIntegerOctULL",
"LiteralFloat32",
"LiteralFloat64",
"LiteralString",
"LiteralStringWide",
"LiteralStringUTF8",
"LiteralStringUTF16",
"LiteralStringUTF32",
"LiteralStringRaw",
"LiteralStringWideRaw",
"LiteralStringUTF8Raw",
"LiteralStringUTF16Raw",
"LiteralStringUTF32Raw",
"LiteralCharacter",
"LiteralCharacterWide",
"LiteralCharacterUTF8",
"LiteralCharacterUTF16",
"LiteralCharacterUTF32",
"PPErrorMessage",
"PPWarningMessage",
"PPRegionName",
"KeywordGeneric",
"BraceOp",
"BraceCl",
"ParenOp",
"BrackOp",
"ParenCl",
"BrackCl",
"Semicolon",
"Colon",
"DotDotDot",
"PlusPlus",
"MinusMinus",
"Dot",
"Arrow",
"Plus",
"Minus",
"Not",
"Tilde",
"Star",
"And",
"DotStar",
"ArrowStar",
"Div",
"Mod",
"TernaryDot",
"TernaryTernary",
"TernaryDotStar",
"LeftLeft",
"RightRight",
"Compare",
"Less",
"LessEq",
"Grtr",
"GrtrEq",
"EqEq",
"NotEq",
"Xor",
"Or",
"AndAnd",
"OrOr",
"Ternary",
"Eq",
"PlusEq",
"MinusEq",
"StarEq",
"DivEq",
"ModEq",
"TernaryEq",
"EqGrtr",
"LeftLeftEq",
"RightRightEq",
"Comma",
"Abstract",
"As",
"Base",
"Bool",
"Break",
"Byte",
"Case",
"Catch",
"Char",
"Checked",
"Class",
"Const",
"Continue",
"Decimal",
"Default",
"Delegate",
"Do",
"Double",
"Else",
"Enum",
"Event",
"Explicit",
"Extern",
"False",
"Finally",
"Fixed",
"Float",
"For",
"Foreach",
"Goto",
"If",
"Implicit",
"In",
"Int",
"Interface",
"Internal",
"Is",
"Lock",
"Long",
"Namespace",
"New",
"Null",
"Object",
"Operator",
"Out",
"Override",
"Params",
"Private",
"Protected",
"Public",
"Readonly",
"Ref",
"Return",
"Sbyte",
"Sealed",
"Short",
"Sizeof",
"Stackalloc",
"Static",
"String",
"Struct",
"Switch",
"This",
"Throw",
"True",
"Try",
"Typeof",
"Uint",
"Ulong",
"Unchecked",
"Unsafe",
"Ushort",
"Using",
"Virtual",
"Void",
"Volatile",
"While",
"Var",
"Yield",
"Where",
"Identifier",
"PPDefine",
"PPUndef",
"PPRegion",
"PPEndRegion",
"PPIf",
"PPElse",
"PPElIf",
"PPEndIf",
"PPError",
"PPWarning",
"PPLine",
"PPPragma",
"PPUnknown",
};
